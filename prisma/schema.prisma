generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int       @id(map: "Author_pk") @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Book      Book[]
}

model Book {
  id        Int        @id(map: "Book_pk") @default(autoincrement())
  title     String     @db.VarChar(255)
  synopsis  String
  authorId  Int
  createdAt DateTime?  @default(now()) @db.Timestamp(6)
  updatedAt DateTime?  @db.Timestamp(6)
  urlImage  String
  Author    Author     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Book_fk0")
  BookLink  BookLink[]
  BookList  BookList[]
  BookVote  BookVote[]
}

model BookList {
  id        Int          @id(map: "BookList_pk") @default(autoincrement())
  bookId    Int
  createdAt DateTime?    @default(now()) @db.Timestamp(6)
  status    BookListType
  finishAt  DateTime     @db.Timestamp(6)
  startAt   DateTime     @db.Timestamp(6)
  groupId   Int
  Book      Book         @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookList_fk1")
  Group     Group        @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model BookVote {
  id        Int       @id(map: "BookVote_pk") @default(autoincrement())
  listId    Int
  bookId    Int
  votes     Int       @default(0)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Book      Book      @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookVote_fk1")
  ListVote  ListVote  @relation(fields: [listId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookVote_fk0")
}

model Group {
  id          Int           @id(map: "Group_pk") @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  description String
  about       String
  status      GroupStatus
  createdAt   DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @db.Timestamp(6)
  urlImage    String
  BookList    BookList[]
  GroupLink   GroupLink[]
  GroupMember GroupMember[]
  ListVote    ListVote[]
  Meeting     Meeting[]
}

model ListVote {
  id          Int        @id(map: "ListVote_pk") @default(autoincrement())
  name        String     @db.VarChar(255)
  description String
  groupId     Int
  createdAt   DateTime?  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?  @db.Timestamp(6)
  Group       Group      @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ListVote_fk0")
  BookVote    BookVote[]
}

model Meeting {
  id                 Int                  @id(map: "Meeting_pk") @default(autoincrement())
  url                String               @db.VarChar(255)
  description        String
  hour               DateTime             @db.Time(6)
  groupId            Int
  createdAt          DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime?            @db.Timestamp(6)
  date               DateTime             @db.Timestamp(6)
  status             MeetingStatusType
  Group              Group                @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Meeting_fk0")
  MeetingParticipant MeetingParticipant[]
}

model User {
  id                 Int                  @id(map: "User_pk") @default(autoincrement())
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  createdAt          DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime?            @db.Timestamp(6)
  urlImage           String
  userName           String               @unique(map: "User_user_key") @db.VarChar(255)
  about              String?              @db.VarChar
  GroupMember        GroupMember[]
  MeetingParticipant MeetingParticipant[]
  Session            Session[]
}

model GroupMember {
  id        Int                @id(map: "Registration_pk") @default(autoincrement())
  userId    Int
  groupId   Int
  status    RegistrationStatus
  message   String             @db.VarChar(255)
  createdAt DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt DateTime?          @db.Timestamp(6)
  roleId    Int
  Group     Group              @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Registration_fk1")
  Role      Role               @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Registration_fk0")
}

model BookLink {
  id        Int       @id(map: "Link_pk") @default(autoincrement())
  url       String
  bookId    Int
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  Book      Book      @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Link_fk0")
}

model GroupLink {
  id        Int       @id @default(autoincrement())
  url       String    @db.VarChar(255)
  groupId   Int
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  Group     Group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MeetingParticipant {
  id        Int       @id @default(autoincrement())
  userId    Int
  meetingId Int
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Meeting   Meeting   @relation(fields: [meetingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Permision {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?       @db.Timestamp(6)
  RolePermision RolePermision[]
}

model Role {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?       @db.Timestamp(6)
  GroupMember   GroupMember[]
  RolePermision RolePermision[]
}

model RolePermision {
  roleId      Int
  permisionId Int
  id          Int       @id @default(autoincrement())
  Permision   Permision @relation(fields: [permisionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Role        Role      @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Session {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum GroupStatus {
  OPEN
  CLOSED
}

enum RegistrationStatus {
  APPLIED
  APROVED
  DENIED
}

enum PositionType {
  OWNER
  MEMBER
  OFFICER
}

enum BookListType {
  CURRENT
  READ
  NEXT
}

enum MeetingStatusType {
  DONE
  COMING
}
