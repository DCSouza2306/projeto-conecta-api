generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int      @id(map: "Author_pk") @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  Book      Book[]
}

model Book {
  id        Int        @id(map: "Book_pk") @default(autoincrement())
  title     String     @db.VarChar(255)
  synopsis  String
  authorId  Int
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @db.Timestamp(6)
  Author    Author     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Book_fk0")
  BookList  BookList[]
  BookVote  BookVote[]
  Link      Link[]
}

model BookList {
  id            Int         @id(map: "BookList_pk") @default(autoincrement())
  readingListId Int
  bookId        Int
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  Book          Book        @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookList_fk1")
  ReadingList   ReadingList @relation(fields: [readingListId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookList_fk0")
}

model BookVote {
  id        Int      @id(map: "BookVote_pk") @default(autoincrement())
  listId    Int
  bookId    Int
  votes     Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @db.Timestamp(6)
  Book      Book     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookVote_fk1")
  ListVote  ListVote @relation(fields: [listId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookVote_fk0")
}

model Group {
  id           Int            @id(map: "Group_pk") @default(autoincrement())
  name         String         @unique @db.VarChar(255)
  description  String
  about        String
  status       GroupStatus
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @db.Timestamp(6)
  ListVote     ListVote[]
  Meeting      Meeting[]
  ReadingList  ReadingList[]
  Registration Registration[]
}

model Link {
  id        Int      @id(map: "Link_pk") @default(autoincrement())
  url       String
  bookId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  Book      Book     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Link_fk0")
}

model ListVote {
  id          Int        @id(map: "ListVote_pk") @default(autoincrement())
  name        String     @db.VarChar(255)
  description String
  groupId     Int
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  updatedAt   DateTime   @db.Timestamp(6)
  Group       Group      @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ListVote_fk0")
  BookVote    BookVote[]
}

model Meeting {
  id          Int      @id(map: "Meeting_pk") @default(autoincrement())
  url         String   @db.VarChar(255)
  description String
  date        DateTime @db.Time(6)
  hour        DateTime @db.Time(6)
  groupId     Int
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @db.Timestamp(6)
  Group       Group    @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Meeting_fk0")
}

model ReadingList {
  id          Int        @id(map: "ReadingList_pk") @default(autoincrement())
  name        String     @db.VarChar(255)
  groupId     Int
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  updatedAt   DateTime   @db.Timestamp(6)
  description String
  Group       Group      @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ReadingList_fk0")
  BookList    BookList[]
}

model Registration {
  id        Int                @id(map: "Registration_pk") @default(autoincrement())
  userId    Int
  groupId   Int
  status    RegistrationStatus
  message   String             @db.VarChar(255)
  createdAt DateTime           @default(now()) @db.Timestamp(6)
  updatedAt DateTime           @db.Timestamp(6)
  Group     Group              @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Registration_fk1")
  User      User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Registration_fk0")
}

model User {
  id           Int            @id(map: "User_pk") @default(autoincrement())
  email        String         @unique @db.VarChar(255)
  user         String         @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @db.Timestamp(6)
  Registration Registration[]
}

enum GroupStatus {
  OPEN
  CLOSED
}

enum RegistrationStatus {
  APPLIED
  APROVED
  DENIED
}
